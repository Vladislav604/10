class StringVar:
    def __init__(self, value=""):
        """
        Инициализация объекта с начальным значением строки.
        """
        self.__value = value

    def set(self, value):
        """
        Устанавливает новое значение строки.
        :param value: Новое значение строки
        """
        self.__value = value

    def get(self):
        """
        Возвращает текущее значение строки.
        :return: Значение строки
        """
        return self.__value


class Point:
    def __init__(self, x=0, y=0):
        """
        Инициализация объекта с координатами x и y.
        """
        self.x = x
        self.y = y

    def set_coordinates(self, x, y):
        """
        Устанавливает новые координаты точки.
        :param x: Новая координата x
        :param y: Новая координата y
        """
        self.x = x
        self.y = y

    def get_coordinates(self):
        """
        Возвращает текущие координаты точки.
        :return: Кортеж (x, y)
        """
        return self.x, self.y

    def distance_to(self, other_point):
        """
        Вычисляет расстояние до другой точки.
        :param other_point: Объект класса Point
        :return: Расстояние между точками
        """
        return ((self.x - other_point.x) ** 2 + (self.y - other_point.y) ** 2) ** 0.5


# Тестирование класса StringVar
if __name__ == "__main__":
    # Создание объекта
    string_var = StringVar("Hello")

    # Проверка метода get
    print("Initial value:", string_var.get())  # Ожидаемый вывод: Hello

    # Изменение значения с помощью метода set
    string_var.set("World")

    # Проверка нового значения
    print("Updated value:", string_var.get())  # Ожидаемый вывод: World

    # Тестирование класса Point
    point1 = Point(3, 4)
    point2 = Point(0, 0)

    print("Point 1 coordinates:", point1.get_coordinates())  # Ожидаемый вывод: (3, 4)
    print("Point 2 coordinates:", point2.get_coordinates())  # Ожидаемый вывод: (0, 0)

    # Вычисление расстояния
    print("Distance between points:", point1.distance_to(point2))  # Ожидаемый вывод: 5.0
